0.txt
1.docx
2.pub
3.zip
4.txt
4 - Copy.txt


P4:
Understand and implement MST algorithms
Be able to determine whether Prim’s Algorithm or Kruskal’s Algorithm is more efficient for a particular scenario
Understand and implement a Branch and Bound (BnB) algorithm
Develop a fast and effective bounding algorithm for the TSP
Explore various heuristic approaches to quickly achieving a nearly-optimal solution
Research online to identify, learn, and implement various “TSP heuristics”
Use a graph visualization tool to help with debugging

P2:
Understand and implement several kinds of priority queues
Be able to independently read, learn about, and implement an unfamiliar data structure
Be able to develop efficient data structures and algorithms
Implement an interface that uses templated “generic” code
Implement an interface that uses inheritance and basic dynamic polymorphism
Become more proficient at testing and debugging your code


Utilized inheritance and basic dynamic polymorphism to implement sorted priority queue, binary heap priority queue and pairing heap priority queue developed from templated generic code.

Applied branch and bound algorithm to solve TSP problem for complete weighted graph, used MST to get the lower bound for remaining cost, and explored various heuristic approaches to achieve a nearly-optimal solution.

Implemented a C++ version of the game 2048 which responded to player's keystrokes, and enabled customized tile values such as Unicode Emojis by reading from files provided by the player.